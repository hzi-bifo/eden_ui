{
    "collab_server" : "",
    "contents" : "# ==============================================================================================\n# global options\n# ==============================================================================================\noptions(shiny.maxRequestSize = 2024 * 1024 ^ 2) # set max file size for file upload\noptions(shiny.deprecation.messages = FALSE)\noptions(shiny.sanitize.errors = FALSE)\n\nshinyServer(function(input, output, session) {\n  # ==============================================================================================\n  # initialize status\n  # ==============================================================================================\n  status <-\n    reactiveValues() # save the run status as a reactive object\n  status$orf_finished <- FALSE # TRUE after start_orf.sh is executed\n  status$eden_finished <-\n    FALSE # TRUE if a finished signal detected in the log file\n  status$eden_failed <-\n    FALSE # is TRUE if a error signal detected in the log file\n  status$samples_provided <-\n    FALSE # TRUE if a samples.txt is provided\n  status$faa <- FALSE\n  status$ffn <- FALSE\n  status$fasta <- FALSE\n  status$files <- NULL\n  # ==============================================================================================\n  # check procedure for the detection which files are provided by the user\n  # ==============================================================================================\n  \n  ### running status\n  # function to evaluate if a process is running in the background\n  update_running_status <- function() {\n    my_running_status <<-\n      get_running_status() # get_new_status returns the html-alert box visible on the first page\n  }\n  output$statusrunning = renderText({\n    invalidateLater(millis = 1000, session) # update every 1 seconds\n    update_running_status() # get a new status line\n  })\n  \n  ### finished status\n  # function to evaluate if a process is running in the background\n  update_finished_status <- function() {\n    my_finished_status <<-\n      get_finished_status() # get_new_status returns the html-alert box visible on the first page\n  }\n  output$statusfinished = renderText({\n    invalidateLater(millis = 1000, session) # update every 1 seconds\n    update_finished_status() # get a new status line\n  })\n  \n  \n  # ==============================================================================================\n  # procedure to update log file / progress message\n  # ==============================================================================================\n  # loads the log file and extract the informations for the check process bar\n  get_new_log <- function() {\n    print(\" get_new_log\")\n    msg <- \"\"\n    data <- read.table(log.path, header = F, sep = \";\")\n    colnames(data) <- c(\"step\", \"steps\", \"message\")\n    \n    last_event <- data[nrow(data), ]$message # current message\n    steps <- data[nrow(data), ]$steps # current step\n    step <-\n      data[nrow(data), ]$step # total number of steps till finished\n    # print(last_event) # for debugging, print the last event\n    if (last_event == \"error\") {\n      # error signal\n      status$check_failed <<- TRUE\n      msg <-\n        paste(\"Last log message: <span class='label label-danger'>check success</span>\")\n    } else if (last_event == \"finished\") {\n      # finished signal for eden\n      msg <-\n        paste(\"Last log message: <span class='label label-success'>eden finished</span>\")\n      status$eden_finished <- TRUE\n    } else {\n      msg <-\n        paste(\"Last log message: <span class='label label-success'>\",\n              last_event,\n              \"</span>\")\n    }\n    return(msg)\n  }\n  \n  # ==============================================================================================\n  # user interface\n  # ==============================================================================================\n  \n  \n  ### ui head part\n  output$upload_ui_head <- renderUI({\n    conditionalPanel(\n      condition = \"input.tsp=='start'\",\n      helpText(\n        \"Step 1: specify input file format. You can either upload .faa and .ffn files of open reading frames (ORF) or the nucleotide .fasta file (in this case the ORFs will be predicted inside the pipeline).\"\n      ),\n      \n      fluidRow(column(\n        5,\n        fileInput(\n          'files_faa',\n          'upload .faa files',\n          accept = c('.faa'),\n          multiple = TRUE\n        )\n      ), column(\n        5,\n        fileInput(\n          'files_ffn',\n          'upload .ffn files',\n          accept = c('.ffn'),\n          multiple = TRUE\n        )\n      )),\n      actionButton('upload_orf', label = \"upload ORF\"),\n      hr(),\n      helpText(\"OR you can provide .fasta files\"),\n      \n      fileInput(\n        'files_fasta',\n        'select one or multiple fasta files',\n        accept = c('.fasta'),\n        multiple = TRUE\n      ),\n      actionButton('upload_fasta', label = \"upload fasta\")\n    )\n  })\n  \n  ### ui mid part\n  output$upload_ui_mid <- renderUI({\n    conditionalPanel(\n      condition = \"input.tsp=='start'\",\n      helpText(\n        \"Step 2: specify file handling: If you want to perform a comparative analysis you have to specify which samples are get pooled together. On default all samples will be pooled together.\"\n      ),\n      uiOutput('uploadsamplestxt')\n    )\n  })\n  \n  output$upload_ui_bottom <- renderUI({\n    conditionalPanel(\n      condition = \"input.tsp=='start'\",\n      helpText(\"Step 3: Specify name and thresholds\"),\n      textInput(\"eden_run_name\", label = \"give your analysis a unique name\", value = \"eden_run_1\"),\n      #  textInput(\"eden_run_cpus\", label = \"number of CPUs used for analysis\", value = \"4\"),\n      numericInput(\"eden_run_cpus\", label = \"number of CPUs\", value = 4),\n      helpText(\n        \"Low-confidence postions can be automatically filtered for the dN/dS analysis. On deault, positions with more than 80% gaps in the alignment will not be used for dN/dS caluclation.\"\n      ),\n      sliderInput(\n        \"eden_run_gap\",\n        label = \"gap proportion to filter out low confidence positions\",\n        min = 0,\n        max = 100,\n        value = 80\n      )\n    )\n  })\n  \n  output$upload_ui_hmm <- renderUI({\n    conditionalPanel(\n      condition = \"input.tsp=='start'\",\n      helpText(\n        \"Step 4: select group definition. You can select precalculated hidden markov models (HMM) or upload a .HMM file which may contain multiple hmm models for the gene families of interest.\"\n      ),\n      \n      radioButtons(\n        \"radio\",\n        label = \"Group definition\",\n        choices = list(\n          \"uploaded HMM model\" = 1,\n          \"TIGRFAM models\" = 2\n        ),\n        selected = 2\n      ),\n      \n      fileInput(\n        'hmmfile',\n        'upload a hidden markov model file',\n        accept = c('.HMM'),\n        multiple = FALSE\n      ),\n      actionButton('upload_hmm', label = \"upload HMM file\")\n    )\n    # uiOutput(\"hmmui\"))\n  })\n  \n  output$upload_ui_buttons <- renderUI({\n    conditionalPanel(\n      condition = \"input.tsp=='start\",\n      actionButton('checkButton', label = \"start analysis\"),\n      actionButton('deletefiles', label = \"reset files\")\n    )\n  })\n  \n  \n  # show upload section for samples.txt\n  output$uploadsamplestxt <- renderUI({\n    conditionalPanel(\n      condition = \"input.tsp=='start'\",\n      helpText(\"Please define which samples are pooled together:\"),\n      numericInput(\"groupnum\", label = \"number of groups\", value = 2),\n      uiOutput(\"groupboxes\"),\n      uiOutput(\"updategroups\")\n    )\n  })\n  \n  output$groupboxes <- renderUI({\n    members <<- as.integer(input$groupnum) # default 2\n    max_pred <- as.integer(20)\n    # faa mode\n    #   if (input$uploadtype == \"orf\"){\n    \n    lapply(1:members, function(i) {\n      fluidRow(column(\n        5,\n        textInput(\n          inputId = paste0(\"name\", i),\n          label = paste(\"name\", i),\n          width = \"100%\",\n          value = paste(\"group_\", i, sep = \"\")\n        )\n      ), column(\n        5,\n        selectInput(\n          inputId = paste0(\"ind\", i),\n          label = paste(\"group\", i),\n          choices = status$files,\n          multiple = TRUE,\n          width = \"100%\"\n        )\n      ))\n    })\n    \n  })\n  \n  output$updategroups <- renderUI({\n    actionButton('updategrouping', label = \"generate grouping file\")\n  })\n  \n  # ==============================================================================================\n  # button press events\n  # ==============================================================================================\n  \n  # delete files on button press\n  observeEvent(input$deletefiles, {\n    isolate({\n      unlink(faa.path, recursive = T, force = T)\n      unlink(ffn.path, recursive = T, force = T)\n      unlink(fasta.path, recursive = T, force = T)\n      unlink(hmm.path, recursive = T, force = T)\n      unlink(sample.path, recursive = T, force = T)\n      unlink(\"/home/eden/data/groups.txt\",\n             recursive = T,\n             force = T)\n      unlink(log.path, recursive = T, force = T)\n      system2(\"echo\", paste('\";;server ready\" >> ', log.path, sep = \"\"))\n      if (!file.exists(fasta.path)) {\n        dir.create(fasta.path)\n      }\n      if (!file.exists(faa.path)) {\n        dir.create(faa.path)\n      }\n      if (!file.exists(ffn.path)) {\n        dir.create(ffn.path)\n      }\n      Sys.chmod(fasta.path, mode = \"0777\", use_umask = TRUE)\n      Sys.chmod(ffn.path, mode = \"0777\", use_umask = TRUE)\n      Sys.chmod(faa.path, mode = \"0777\", use_umask = TRUE)\n      \n      \n      if (!file.exists(fasta.path)) {\n        dir.create(fasta.path)\n      }\n      if (!file.exists(faa.path)) {\n        dir.create(faa.path)\n      }\n      if (!file.exists(ffn.path)) {\n        dir.create(ffn.path)\n      }\n      Sys.chmod(fasta.path, mode = \"0777\", use_umask = TRUE)\n      Sys.chmod(ffn.path, mode = \"0777\", use_umask = TRUE)\n      Sys.chmod(faa.path, mode = \"0777\", use_umask = TRUE)\n      \n      status <-\n        reactiveValues() # save the run status as a reactive object\n      input <-\n        reactiveValues() # save the run status as a reactive object\n      \n      #\n      # input <- NULL\n      # js$reset()\n    })\n  })\n  \n  \n  # faa upload\n  observeEvent(input$upload_orf, {\n    print(\"upload_faa using observedEvent\")\n    infiles_faa <- as.data.frame(input$files_faa)\n    infiles_faa$dest <-\n      paste(faa.path, infiles_faa$name, sep = \"/\")\n    for (i in 1:nrow(infiles_faa)) {\n      cmd <-\n        paste(\"mv \", infiles_faa$datapath[i], \" \", infiles_faa$dest[i], sep = \"\")\n      err <- system(cmd,  intern = TRUE)\n    }\n    system2(\"echo\", paste('\";;faa files added\" >> ', log.path, sep = \"\"))\n    status$faa <- TRUE\n    \n    # process ffn\n    infiles_ffn <- as.data.frame(input$files_ffn)\n    infiles_ffn$dest <-\n      paste(ffn.path, infiles_ffn$name, sep = \"/\")\n    for (i in 1:nrow(infiles_ffn)) {\n      cmd <-\n        paste(\"mv \", infiles_ffn$datapath[i], \" \", infiles_ffn$dest[i], sep = \"\")\n      err <- system(cmd,  intern = TRUE)\n    }\n    system2(\"echo\", paste('\";;ffn files added\" >> ', log.path, sep = \"\"))\n    status$ffn <- TRUE\n    \n    # update files\n    status$files <- list.files(path =  faa.path,\n                               full.names = FALSE,\n                               recursive = FALSE)\n    \n    \n    \n  })\n  \n  # fasta upload\n  observeEvent(input$upload_fasta, {\n    print(\"upload_fasta using observedEvent\")\n    \n    infiles_fasta <- as.data.frame(input$files_fasta)\n    infiles_fasta$dest <-\n      paste(fasta.path, infiles_fasta$name, sep = \"/\")\n    for (i in 1:nrow(infiles_fasta)) {\n      cmd <-\n        paste(\"mv \",\n              infiles_fasta$datapath[i],\n              \" \",\n              infiles_fasta$dest[i],\n              sep = \"\")\n      err <- system(cmd,  intern = TRUE)\n    }\n    out <- paste(err)\n    system2(\"echo\", paste('\";;fasta files added\" >> ', log.path, sep = \"\"))\n    status$fasta <- TRUE\n    \n    status$files <- list.files(path =  fasta.path,\n                               full.names = FALSE,\n                               recursive = FALSE)\n    \n    \n  })\n  \n  \n  \n  # hmm upload\n  observeEvent(input$upload_hmm, {\n    print(\"upload_hmm using observedEvent\")\n    # process ffn\n    hmmfile <- as.data.frame(input$hmmfile)\n    hmmfile$dest <- hmm.path\n    cmd <-\n      paste(\"mv \", hmmfile$datapath, \" \", hmmfile$dest, sep = \"\")\n    err <- system(cmd,  intern = TRUE)\n    out <- paste(err)\n    system2(\"echo\", paste('\";;hmmfile added\" >> ', log.path, sep = \"\"))\n    hmmfile_success <<- TRUE\n    \n  })\n  \n  \n  # iterate over input$name_ and input$ind_ and create a samples table\n  observeEvent(input$updategrouping, {\n    sam <-  rep(\"unknown\", members)\n    nam <- rep(\"unknown\", members)\n    for (i in 1:members) {\n      temp <- paste0(\"name\", i)\n      temp2 <<- paste0(\"ind\", i)\n      nam[i] <- input[[temp]]\n      print(paste(basename(file_path_sans_ext(input[[temp2]])),  collapse =\n                    \"+\"))\n      #  sam[i] <- paste(substr(input[[temp2]], 1, nchar(input[[temp2]])-4), collapse=\"+\")\n      \n      #  sam[i] <- paste(substr(input[[temp2]], 1, nchar(input[[temp2]])-4), collapse=\"+\")\n      sam[i] <-\n        paste(basename(file_path_sans_ext(input[[temp2]])),  collapse = \"+\")\n    }\n    dat <- data.frame(name = nam, sample = sam)\n    write.table(\n      dat,\n      file = sample.path,\n      row.names = F,\n      quote = F,\n      col.names = F,\n      sep = \";\"\n    )\n    status$samples_provided <- TRUE\n    system2(\"echo\",\n            paste('\";;grouping file updated\" >> ', log.path, sep = \"\"))\n    \n  })\n  \n  # ==============================================================================================\n  # function that updates message based on files prsovided\n  # ==============================================================================================\n  \n  get_running_status <- function() {\n    if (file.exists(lock.file)) {\n      msg <-\n        \"</br><div class='alert alert-dismissible alert-info'>\n      <button type='button' class='close' data-dismiss='alert'>&times;</button>\n      <p><strong>A process is running in the background! Please wait</strong> until the process is finished.</p>\"\n      # print ok when criteria are met\n      return(msg)\n    } else {\n      return(NULL)\n    }\n  }\n  \n  \n  get_finished_status <- function() {\n    if (isolate(status$eden_finished)) {\n      msg <-\n        \"</br><div class='alert alert-dismissible alert-info'>\n      <button type='button' class='close' data-dismiss='alert'>&times;</button>\n      <p><strong>Eden finished!</stong>  <a href='../eden-visualizer' class='alert-link'> download and visualize the results</p>\"\n      # clean up\n      unlink(faa.path, recursive = T, force = T)\n      unlink(ffn.path, recursive = T, force = T)\n      unlink(fasta.path, recursive = T, force = T)\n      unlink(hmm.path, recursive = T, force = T)\n      unlink(sample.path, recursive = T, force = T)\n      unlink(\"/home/eden/data/groups.txt\",\n             recursive = T,\n             force = T)\n      unlink(log.path, recursive = T, force = T)\n      system2(\"echo\", paste('\";;server ready\" >> ', log.path, sep = \"\"))\n      if (!file.exists(fasta.path)) {\n        dir.create(fasta.path)\n      }\n      if (!file.exists(faa.path)) {\n        dir.create(faa.path)\n      }\n      if (!file.exists(ffn.path)) {\n        dir.create(ffn.path)\n      }\n      Sys.chmod(fasta.path, mode = \"0777\", use_umask = TRUE)\n      Sys.chmod(ffn.path, mode = \"0777\", use_umask = TRUE)\n      Sys.chmod(faa.path, mode = \"0777\", use_umask = TRUE)\n      status <-\n        reactiveValues() # save the run status as a reactive object\n      input <-\n        reactiveValues() # save the run status as a reactive object\n      return(msg)\n    } else {\n      return(NULL)\n    }\n  }\n  \n  # ==============================================================================================\n  # execution of shell scripts and update of statusmsg print\n  # ==============================================================================================\n  \n  # use observe event to check if button pressed\n  observeEvent(input$checkButton, {\n    #  file.create(lock.file)\n    \n    system(\n      paste(\n        \"/home/eden/start_check.sh\",\n        faa.path,\n        ffn.path,\n        input$eden_run_cpus,\n        input$eden_run_name,\n        input$eden_run_gap / 100,\n        hmm.path,\n        sample.path\n      ),\n      wait = FALSE\n    )\n    \n    # unlink(faa.path, recursive = T, force = T)\n    # unlink(ffn.path, recursive = T, force = T)\n    # unlink(fasta.path, recursive = T, force = T)\n    # unlink(hmm.path, recursive = T, force = T)\n    # unlink(sample.path, recursive = T, force = T)\n    # unlink(\"/home/eden/data/groups.txt\", recursive = T, force = T)\n    # unlink(log.path, recursive = T, force = T)\n    # system2(\"echo\", paste('\";;server ready\" >> ', log.path, sep = \"\"))\n    # if (!file.exists(fasta.path)) {\n    #   dir.create(fasta.path)\n    # }\n    # if (!file.exists(faa.path)) {\n    #   dir.create(faa.path)\n    # }\n    # if (!file.exists(ffn.path)) {\n    #   dir.create(ffn.path)\n    # }\n    # Sys.chmod(fasta.path, mode = \"0777\", use_umask = TRUE)\n    # Sys.chmod(ffn.path, mode = \"0777\", use_umask = TRUE)\n    # Sys.chmod(faa.path, mode = \"0777\", use_umask = TRUE)\n    #\n  })\n  \n  # Initialize log\n  my_log <<- get_new_log()\n  \n  # Function to update my_data\n  update_log <- function() {\n    my_log <<- get_new_log()\n  }\n  \n  output$log = renderText({\n    invalidateLater(millis = 1000, session)\n    update_log()\n  })\n  \n  output$text1 <-  renderText({\n    \"</br>\"\n  })\n  \n  output$text2 <- renderText({\n    paste(status$files)\n  })\n  \n  #\n  # ==============================================================================================\n  # clean up on close\n  # ==============================================================================================\n  \n  ### clean up routine\n  cancel.onSessionEnded <- session$onSessionEnded(function() {\n    print(\"SessionEnded\")\n    unlink(faa.path, recursive = T, force = T)\n    unlink(ffn.path, recursive = T, force = T)\n    unlink(fasta.path, recursive = T, force = T)\n    unlink(hmm.path, recursive = T, force = T)\n    unlink(sample.path, recursive = T, force = T)\n    unlink(\"/home/eden/data/groups.txt\",\n           recursive = T,\n           force = T)\n    unlink(log.path, recursive = T, force = T)\n    system2(\"echo\", paste('\";;server ready\" >> ', log.path, sep = \"\"))\n    if (!file.exists(fasta.path)) {\n      dir.create(fasta.path)\n    }\n    if (!file.exists(faa.path)) {\n      dir.create(faa.path)\n    }\n    if (!file.exists(ffn.path)) {\n      dir.create(ffn.path)\n    }\n    Sys.chmod(fasta.path, mode = \"0777\", use_umask = TRUE)\n    Sys.chmod(ffn.path, mode = \"0777\", use_umask = TRUE)\n    Sys.chmod(faa.path, mode = \"0777\", use_umask = TRUE)\n    status <-\n      reactiveValues() # save the run status as a reactive object\n    input <-\n      reactiveValues() # save the run status as a reactive object\n    #    js$reset()\n  })\n})",
    "created" : 1484825329685.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3819350440",
    "id" : "29BD1E17",
    "lastKnownWriteTime" : 1484748182,
    "last_content_update" : 1484748182,
    "path" : "~/github.com/philippmuench/eden_ui/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}